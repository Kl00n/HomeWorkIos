 import UIKit

 enum accountError: Error{
        case invalidOperation
        case outOfStock
        case negativeBalance
	    case sendingDataToTax
	
 public class BankAccount{
    var id: Int
    var balance: Double
    
    init(id: Int, balance: Double){
        self.id = id
        self.balance = balance
    }
	 func withdraw (by amount: Double) throws {
		 guard balance > 5000000 else {
			throw accountError.sendingDataToTax
		} 
		 guard balance == nil else {
            throw accountError.outOfStock
        }
        guard balance < amount else {
            throw accountError.negativeBalance
        }
		 
        balance -= amount
    }
	 mutating func deposit(value: Int) throws {
        if value < 0 {
            throw accountError.invalidOperation
        }
        balance += value
    }


protocol Client{
    var id : Int 
    var BankAccount: BankAccount 
}

public class Entity: Client {
    var id: Int
    var BankAccount: BankAccount
    var Name: String
    var OrganizationType: String
    init (id: Int, BankAccount: BankAccount, name: String, enum OrganizationType: String){
        self.id = id
        self.BankAccount = BankAccount
        self.Name = name
        self.OrganizationType = OrganizationType
    }
	   
}
public class Individual: Client {
	var id: Int
    var BankAccount: BankAccount
    var name: String
    var surname: String
	var birthday: Date
    
    init(id: Int, BankAccount: BankAccount, name: String, surname: String, birthday: Date ) {
		self.id = id
		self.BankAccount = BankAccount
        self.name = name
        self.surname = surname
        self.birthday = Date
    }
}
enum org {
    case OOO
    case OAO
}